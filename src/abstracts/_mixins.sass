// These are flex-box mixins. The first two center their content with both 'justify-content' and 'align-items' set to a value of 'center'. The only arguments accepted are width and height, with 100% being the default values if no arguments are used.

=rc-flex($w: 100%, $h: 100%)
  display: flex
  justify-content: center
  align-items: center
  width: $w
  height: $h

=cc-flex($w: 100%, $h: 100%)
  display: flex
  flex-direction: column
  justify-content: center
  align-items: center
  width: $w
  height: $h

// This third flex-box is a customizable version of the two up above. Unlike the other two, you must select which flex-direction you want and you will need to specify values for 'justify-content', 'align-items', 'width', and 'height'.

=custom-flex($direction, $justify, $align, $w, $h)
  display: flex
  flex-direction: $direction
  justify-content: $justify
  align-items: $align
  width: $w
  height: $h

// Button stuff. Not sure if I'm gonna keep all this or tranfer it into a singular base component. Gotta learn more about React before I can decided that.

=button($w: auto, $bg-color: $primary-color)
  border: none
  border-radius: $button-border-radius
  background: $bg-color
  width: $w
  height: 46px
  color: $base-white
  font-family: Arial, Helvetica, sans-serif
  font-size: 22px
  letter-spacing: -0.8px

=link-button($w: auto, $bg-color: $primary-color)
  display: flex
  flex-direction: row
  align-items: center
  border-radius: $button-border-radius
  background: $bg-color
  padding: 0 1em
  width: $w
  height: 2.1em
  text-decoration: none
  color: $base-white
  font-family: Arial, Helvetica, sans-serif
  /* Refactor this into appropriate 'em' value. */
  font-size: 22px
  letter-spacing: -0.8px


=small-button($w, $bg-color)
  border: none
  border-radius: $button-border-radius
  box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.5)
  background-color: $bg-color
  width: $w
  height: 33px
  color: $base-white
  font-family: Arial, Helvetica, sans-serif
  font-size: 16px
  letter-spacing: -0.6px

=content($width, $height)
  width: $width
  height: $height

// This mixin applies to inputs and applies animations to them.

=animated-input($w, $h)
  display: flex
  flex-direction: column
  justify-content: center
  align-items: center
  width: $w
  height: $h

  box-sizing: border-box
  position: relative
  input
    box-sizing: border-box
    font-size: 18px
    padding: 10px 10px 10px 5px
    display: block
    width: 100%
    border: none
    border-bottom: 1px solid #757575
  input:focus
    outline: none
  label
    position: absolute
    left: 1.5em
    top: 1.8em
    color: #999
    font-size: 1.2em
    pointer-events: none
    transition: 0.2s ease all
  input:focus ~ label, input:valid ~ label
    top: 0.3em
    font-size: 14px
    color: $highlight-color
  .input__bar
    position: relative 
    display: block
    width: 100%
  .input__bar::before, .input__bar::after
    content: ''
    position: absolute
    bottom: 1px
    width: 0
    height: 2px
    background: $highlight-color
    transition: 0.2s ease all
  .input__bar::before
    left: 50%
  .input__bar::after 
    right: 50%
  input:focus ~ .bar::before, input:focus ~ .bar::after
    width: 50%
  .input__highlight
    position: absolute
    top: 25%
    left: 0
    width: 150px
    height: 60%
    pointer-events: none
    opacity: 0.5
  input:focus ~ .input__highlight
    animation: inputHighlighter 0.3s ease
  @keyframes inputHighlighter
    from 
      background: #5264AE
    to 
      width: 0 
      background: transparent

// Media query conditional declarations. //

=media($size)
  @if $size == S475
    @media (min-width: $S475)
      @content
  @else if $size == S600
    @media (min-width: $S600)
      @content
  @else if $size == S1000
    @media (min-width: $S1000)
      @content
  @else if $size == S1500
    @media (min-width: $S1500)
      @content






